{"ast":null,"code":"import { BehaviorSubject, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nconst ETAPAS = ['Prospección', 'Calificación', 'Propuesta', 'Negociación', 'Cierre'];\nconst FUENTES = ['Inbound', 'Outbound', 'Partner', 'Evento', 'Referido'];\nconst TERRITORIOS = ['Norte', 'Centro', 'Sur', 'LatAm', 'Europa'];\nconst PROPIETARIOS = ['Carla', 'Mateo', 'Lucía', 'Andrés', 'Paula'];\nconst SECTORES = ['Tecnología', 'Finanzas', 'Retail', 'Manufactura', 'Salud'];\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction randomItem(items) {\n  return items[Math.floor(Math.random() * items.length)];\n}\nexport let InMemoryDataService = /*#__PURE__*/(() => {\n  class InMemoryDataService {\n    opportunities$ = new BehaviorSubject([]);\n    activities$ = new BehaviorSubject([]);\n    accounts$ = new BehaviorSubject([]);\n    constructor() {\n      this.bootstrap();\n    }\n    bootstrap() {\n      const opportunities = Array.from({\n        length: 200\n      }).map((_, index) => {\n        const etapa = randomItem(ETAPAS);\n        const monto = randomInt(15, 250) * 1000;\n        return {\n          id: `OP-${index + 1}`,\n          nombre: `Oportunidad ${index + 1}`,\n          cuenta: `Cuenta ${randomInt(1, 80)}`,\n          etapa,\n          monto,\n          probabilidad: randomInt(25, 90),\n          cierrePrevisto: new Date(Date.now() + randomInt(7, 120) * 24 * 60 * 60 * 1000).toISOString(),\n          propietario: randomItem(PROPIETARIOS),\n          fuente: randomItem(FUENTES),\n          territorio: randomItem(TERRITORIOS)\n        };\n      });\n      const activities = Array.from({\n        length: 40\n      }).map((_, index) => ({\n        id: `ACT-${index + 1}`,\n        tipo: randomItem(['Llamada', 'Reunión', 'Tarea']),\n        asunto: `Seguimiento ${index + 1}`,\n        fecha: new Date(Date.now() + randomInt(1, 14) * 24 * 60 * 60 * 1000).toISOString(),\n        cuenta: `Cuenta ${randomInt(1, 80)}`,\n        oportunidadId: randomItem(opportunities).id,\n        estado: 'Pendiente'\n      }));\n      const accounts = Array.from({\n        length: 120\n      }).map((_, index) => ({\n        id: `AC-${index + 1}`,\n        nombre: `Cuenta ${index + 1}`,\n        sector: randomItem(SECTORES),\n        segmento: randomItem(['Enterprise', 'Mid-Market', 'SMB']),\n        territorio: randomItem(TERRITORIOS),\n        ingresosAnuales: randomInt(1, 400) * 1000000\n      }));\n      this.opportunities$.next(opportunities);\n      this.activities$.next(activities);\n      this.accounts$.next(accounts);\n    }\n    getOpportunities() {\n      return this.opportunities$.asObservable();\n    }\n    getOpportunity(id) {\n      return this.opportunities$.pipe(map(items => items.find(item => item.id === id)));\n    }\n    updateOpportunity(partial) {\n      const next = this.opportunities$.value.map(item => item.id === partial.id ? {\n        ...item,\n        ...partial\n      } : item);\n      this.opportunities$.next(next);\n    }\n    getActivities() {\n      return this.activities$.asObservable();\n    }\n    getAccounts() {\n      return this.accounts$.asObservable();\n    }\n    getAccount(id) {\n      return this.accounts$.pipe(map(items => items.find(item => item.id === id)));\n    }\n    completeActivity(id) {\n      const next = this.activities$.value.map(item => item.id === id ? {\n        ...item,\n        estado: 'Completada'\n      } : item);\n      this.activities$.next(next);\n      return of(next.find(item => item.id === id));\n    }\n    static ɵfac = function InMemoryDataService_Factory(t) {\n      return new (t || InMemoryDataService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: InMemoryDataService,\n      factory: InMemoryDataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return InMemoryDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}