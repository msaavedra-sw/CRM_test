{"ast":null,"code":"import { BehaviorSubject, combineLatest, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../data/in-memory-data.service\";\nexport let AccountStateService = /*#__PURE__*/(() => {\n  class AccountStateService {\n    inMemory;\n    search$ = new BehaviorSubject('');\n    accounts$ = combineLatest([this.inMemory.getAccounts(), this.search$]).pipe(map(([accounts, search]) => {\n      const lower = search.toLowerCase();\n      return accounts.filter(account => lower ? account.nombre.toLowerCase().includes(lower) : true);\n    }));\n    constructor(inMemory) {\n      this.inMemory = inMemory;\n    }\n    setSearch(value) {\n      this.search$.next(value);\n    }\n    static ɵfac = function AccountStateService_Factory(t) {\n      return new (t || AccountStateService)(i0.ɵɵinject(i1.InMemoryDataService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AccountStateService,\n      factory: AccountStateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AccountStateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}