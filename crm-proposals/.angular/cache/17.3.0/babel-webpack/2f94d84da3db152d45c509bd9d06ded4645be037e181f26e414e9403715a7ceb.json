{"ast":null,"code":"var __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nvar __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { combineLatest, map } from 'rxjs';\nimport { DataTableComponent } from '../../shared/components/data-table/data-table.component';\nimport { OpportunityStateService } from '../../core/services/opportunity-state.service';\nimport { CsvService } from '../../core/services/csv.service';\nimport { I18nPipe } from '../../shared/utils/i18n.pipe';\nlet VariantAPageComponent = (() => {\n  let _classDecorators = [Component({\n    selector: 'app-variant-a-page',\n    standalone: true,\n    imports: [CommonModule, RouterModule, DataTableComponent, I18nPipe],\n    templateUrl: './variant-a-page.component.html',\n    styleUrl: './variant-a-page.component.scss',\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var VariantAPageComponent = class {\n    static {\n      _classThis = this;\n    }\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      VariantAPageComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    }\n    state = inject(OpportunityStateService);\n    csv = inject(CsvService);\n    columns = [{\n      key: 'nombre',\n      title: 'Nombre',\n      sortable: true,\n      filterable: true,\n      pinned: 'left'\n    }, {\n      key: 'cuenta',\n      title: 'Cuenta',\n      sortable: true,\n      filterable: true\n    }, {\n      key: 'etapa',\n      title: 'Etapa',\n      sortable: true,\n      filterable: true,\n      summary: 'count'\n    }, {\n      key: 'monto',\n      title: 'Monto',\n      type: 'number',\n      sortable: true,\n      summary: 'sum'\n    }, {\n      key: 'probabilidad',\n      title: 'Probabilidad',\n      type: 'number',\n      sortable: true\n    }, {\n      key: 'cierrePrevisto',\n      title: 'Cierre previsto',\n      type: 'date',\n      sortable: true\n    }, {\n      key: 'propietario',\n      title: 'Propietario',\n      sortable: true,\n      filterable: true\n    }, {\n      key: 'fuente',\n      title: 'Fuente',\n      sortable: true,\n      filterable: true\n    }, {\n      key: 'territorio',\n      title: 'Territorio',\n      sortable: true,\n      filterable: true\n    }];\n    view$ = combineLatest([this.state.opportunities$, this.state.selectedIds()]).pipe(map(([rows, selection]) => ({\n      rows,\n      selection\n    })));\n    exportCsv(rows) {\n      this.csv.exportToCsv('oportunidades.csv', rows);\n    }\n    onCellEdit(event) {\n      const id = String(event.row['id']);\n      if (id) {\n        this.state.update({\n          id,\n          [event.key]: event.value\n        });\n      }\n    }\n  };\n  return VariantAPageComponent = _classThis;\n})();\nexport { VariantAPageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}