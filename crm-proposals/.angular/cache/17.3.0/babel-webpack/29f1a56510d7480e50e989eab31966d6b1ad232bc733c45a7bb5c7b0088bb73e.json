{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"canvas\"];\nexport let MiniChartComponent = /*#__PURE__*/(() => {\n  class MiniChartComponent {\n    type = 'bar';\n    values = [];\n    canvasRef;\n    ngAfterViewInit() {\n      this.render();\n    }\n    render() {\n      const canvas = this.canvasRef?.nativeElement;\n      if (!canvas) {\n        return;\n      }\n      const context = canvas.getContext('2d');\n      if (!context) {\n        return;\n      }\n      const width = canvas.width;\n      const height = canvas.height;\n      context.clearRect(0, 0, width, height);\n      switch (this.type) {\n        case 'bar':\n          this.renderBars(context, width, height);\n          break;\n        case 'line':\n          this.renderLine(context, width, height);\n          break;\n        case 'donut':\n          this.renderDonut(context, width, height);\n          break;\n        default:\n          break;\n      }\n    }\n    renderBars(context, width, height) {\n      const max = Math.max(...this.values, 1);\n      const barWidth = width / this.values.length;\n      this.values.forEach((value, index) => {\n        const barHeight = value / max * height;\n        context.fillStyle = '#4f46ef';\n        context.fillRect(index * barWidth, height - barHeight, barWidth - 4, barHeight);\n      });\n    }\n    renderLine(context, width, height) {\n      const max = Math.max(...this.values, 1);\n      const step = width / (this.values.length - 1);\n      context.strokeStyle = '#4f46ef';\n      context.lineWidth = 2;\n      context.beginPath();\n      this.values.forEach((value, index) => {\n        const x = index * step;\n        const y = height - value / max * height;\n        if (index === 0) {\n          context.moveTo(x, y);\n        } else {\n          context.lineTo(x, y);\n        }\n      });\n      context.stroke();\n    }\n    renderDonut(context, width, height) {\n      const total = this.values.reduce((acc, value) => acc + value, 0) || 1;\n      let startAngle = 0;\n      const radius = Math.min(width, height) / 2 - 4;\n      const centerX = width / 2;\n      const centerY = height / 2;\n      const colors = ['#4f46ef', '#7f5bff', '#9f7fff'];\n      this.values.forEach((value, index) => {\n        const sliceAngle = value / total * Math.PI * 2;\n        context.beginPath();\n        context.moveTo(centerX, centerY);\n        context.fillStyle = colors[index % colors.length];\n        context.arc(centerX, centerY, radius, startAngle, startAngle + sliceAngle);\n        context.closePath();\n        context.fill();\n        startAngle += sliceAngle;\n      });\n      context.globalCompositeOperation = 'destination-out';\n      context.beginPath();\n      context.arc(centerX, centerY, radius / 2, 0, Math.PI * 2);\n      context.fill();\n      context.globalCompositeOperation = 'source-over';\n    }\n    static ɵfac = function MiniChartComponent_Factory(t) {\n      return new (t || MiniChartComponent)();\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MiniChartComponent,\n      selectors: [[\"app-mini-chart\"]],\n      viewQuery: function MiniChartComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);\n        }\n      },\n      inputs: {\n        type: \"type\",\n        values: \"values\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 2,\n      vars: 0,\n      consts: [[\"canvas\", \"\"], [\"width\", \"200\", \"height\", \"120\", \"role\", \"img\"]],\n      template: function MiniChartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"canvas\", 1, 0);\n        }\n      },\n      dependencies: [CommonModule],\n      styles: [\"canvas[_ngcontent-%COMP%]{width:100%;height:auto}\"],\n      changeDetection: 0\n    });\n  }\n  return MiniChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}