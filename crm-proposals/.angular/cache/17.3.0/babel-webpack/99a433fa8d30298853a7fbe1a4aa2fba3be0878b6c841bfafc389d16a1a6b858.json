{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ColumnResizeDirective = /*#__PURE__*/(() => {\n  class ColumnResizeDirective {\n    el;\n    renderer;\n    enabled = true;\n    startX = 0;\n    startWidth = 0;\n    resizing = false;\n    handle;\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      this.handle = this.renderer.createElement('span');\n      this.renderer.addClass(this.handle, 'resize-handle');\n      this.renderer.setStyle(this.handle, 'position', 'absolute');\n      this.renderer.setStyle(this.handle, 'top', '0');\n      this.renderer.setStyle(this.handle, 'right', '0');\n      this.renderer.setStyle(this.handle, 'width', '8px');\n      this.renderer.setStyle(this.handle, 'cursor', 'col-resize');\n      this.renderer.setStyle(this.handle, 'height', '100%');\n      this.renderer.setStyle(this.handle, 'z-index', '10');\n      this.renderer.appendChild(this.el.nativeElement, this.handle);\n    }\n    onMouseDown(event) {\n      if (!this.enabled || event.target !== this.handle) {\n        return;\n      }\n      this.resizing = true;\n      this.startX = event.pageX;\n      this.startWidth = this.el.nativeElement.offsetWidth;\n      event.preventDefault();\n    }\n    onMouseMove(event) {\n      if (!this.resizing) {\n        return;\n      }\n      const width = this.startWidth + (event.pageX - this.startX);\n      this.renderer.setStyle(this.el.nativeElement, 'width', `${Math.max(width, 80)}px`);\n    }\n    onMouseUp() {\n      this.resizing = false;\n    }\n    static ɵfac = function ColumnResizeDirective_Factory(t) {\n      return new (t || ColumnResizeDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n    static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: ColumnResizeDirective,\n      selectors: [[\"\", \"appColumnResize\", \"\"]],\n      hostBindings: function ColumnResizeDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"mousedown\", function ColumnResizeDirective_mousedown_HostBindingHandler($event) {\n            return ctx.onMouseDown($event);\n          })(\"mousemove\", function ColumnResizeDirective_mousemove_HostBindingHandler($event) {\n            return ctx.onMouseMove($event);\n          }, false, i0.ɵɵresolveDocument)(\"mouseup\", function ColumnResizeDirective_mouseup_HostBindingHandler() {\n            return ctx.onMouseUp();\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      inputs: {\n        enabled: [i0.ɵɵInputFlags.None, \"appColumnResize\", \"enabled\"]\n      },\n      standalone: true\n    });\n  }\n  return ColumnResizeDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}