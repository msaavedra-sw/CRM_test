{"ast":null,"code":"import { inject } from '@angular/core';\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\nimport { InMemoryDataService } from '../data/in-memory-data.service';\nimport * as i0 from \"@angular/core\";\nexport let OpportunityStateService = /*#__PURE__*/(() => {\n  class OpportunityStateService {\n    data = inject(InMemoryDataService);\n    filters$ = new BehaviorSubject({\n      search: ''\n    });\n    selectedIds$ = new BehaviorSubject(new Set());\n    opportunities$ = combineLatest([this.data.getOpportunities(), this.filters$]).pipe(map(([opportunities, filters]) => {\n      const {\n        search,\n        etapa,\n        propietario,\n        territorio\n      } = filters;\n      const searchLower = search.toLowerCase();\n      return opportunities.filter(item => {\n        const matchesSearch = !searchLower || item.nombre.toLowerCase().includes(searchLower) || item.cuenta.toLowerCase().includes(searchLower);\n        const matchesEtapa = !etapa || item.etapa === etapa;\n        const matchesPropietario = !propietario || item.propietario === propietario;\n        const matchesTerritorio = !territorio || item.territorio === territorio;\n        return matchesSearch && matchesEtapa && matchesPropietario && matchesTerritorio;\n      });\n    }));\n    updateFilters(filters) {\n      this.filters$.next({\n        ...this.filters$.value,\n        ...filters\n      });\n    }\n    toggleSelect(id, multi = false) {\n      const current = new Set(this.selectedIds$.value);\n      if (!multi) {\n        current.clear();\n      }\n      if (current.has(id)) {\n        current.delete(id);\n      } else {\n        current.add(id);\n      }\n      this.selectedIds$.next(current);\n    }\n    selectRange(ids) {\n      this.selectedIds$.next(new Set(ids));\n    }\n    clearSelection() {\n      this.selectedIds$.next(new Set());\n    }\n    selectedIds() {\n      return this.selectedIds$.asObservable();\n    }\n    update(opportunity) {\n      this.data.updateOpportunity(opportunity);\n    }\n    static ɵfac = function OpportunityStateService_Factory(t) {\n      return new (t || OpportunityStateService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OpportunityStateService,\n      factory: OpportunityStateService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return OpportunityStateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}