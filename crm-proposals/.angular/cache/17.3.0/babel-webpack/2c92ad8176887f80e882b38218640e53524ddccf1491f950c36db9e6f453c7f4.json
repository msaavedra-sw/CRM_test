{"ast":null,"code":"var __runInitializers = this && this.__runInitializers || function (thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\nvar __esDecorate = this && this.__esDecorate || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) {\n    if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n    return f;\n  }\n  var kind = contextIn.kind,\n    key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _,\n    done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n    var context = {};\n    for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n    for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n    context.addInitializer = function (f) {\n      if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n      extraInitializers.push(accept(f || null));\n    };\n    var result = (0, decorators[i])(kind === \"accessor\" ? {\n      get: descriptor.get,\n      set: descriptor.set\n    } : descriptor[key], context);\n    if (kind === \"accessor\") {\n      if (result === void 0) continue;\n      if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n      if (_ = accept(result.get)) descriptor.get = _;\n      if (_ = accept(result.set)) descriptor.set = _;\n      if (_ = accept(result.init)) initializers.unshift(_);\n    } else if (_ = accept(result)) {\n      if (kind === \"field\") initializers.unshift(_);else descriptor[key] = _;\n    }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\nimport { ChangeDetectionStrategy, Component, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DragDropModule, moveItemInArray } from '@angular/cdk/drag-drop';\nimport { CdkVirtualScrollViewport, ScrollingModule } from '@angular/cdk/scrolling';\nimport { BehaviorSubject, combineLatest, map, startWith } from 'rxjs';\nimport { ColumnResizeDirective } from '../../directives/column-resize.directive';\nimport { DragDropColumnsDirective } from '../../directives/drag-drop-columns.directive';\nimport { InlineEditCellComponent } from '../inline-edit-cell/inline-edit-cell.component';\nlet DataTableComponent = (() => {\n  let _classDecorators = [Component({\n    selector: 'app-data-table',\n    standalone: true,\n    imports: [CommonModule, FormsModule, ReactiveFormsModule, DragDropModule, ColumnResizeDirective, DragDropColumnsDirective, InlineEditCellComponent, ScrollingModule],\n    templateUrl: './data-table.component.html',\n    styleUrl: './data-table.component.scss',\n    changeDetection: ChangeDetectionStrategy.OnPush\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  let _instanceExtraInitializers = [];\n  let _columns_decorators;\n  let _columns_initializers = [];\n  let _columns_extraInitializers = [];\n  let _data_decorators;\n  let _data_initializers = [];\n  let _data_extraInitializers = [];\n  let _pageSize_decorators;\n  let _pageSize_initializers = [];\n  let _pageSize_extraInitializers = [];\n  let _density_decorators;\n  let _density_initializers = [];\n  let _density_extraInitializers = [];\n  let _enableColumnReorder_decorators;\n  let _enableColumnReorder_initializers = [];\n  let _enableColumnReorder_extraInitializers = [];\n  let _enableColumnResize_decorators;\n  let _enableColumnResize_initializers = [];\n  let _enableColumnResize_extraInitializers = [];\n  let _enableInlineEdit_decorators;\n  let _enableInlineEdit_initializers = [];\n  let _enableInlineEdit_extraInitializers = [];\n  let _keyboardShortcuts_decorators;\n  let _keyboardShortcuts_initializers = [];\n  let _keyboardShortcuts_extraInitializers = [];\n  let _cellEdited_decorators;\n  let _cellEdited_initializers = [];\n  let _cellEdited_extraInitializers = [];\n  let _rowSelected_decorators;\n  let _rowSelected_initializers = [];\n  let _rowSelected_extraInitializers = [];\n  let _viewport_decorators;\n  let _viewport_initializers = [];\n  let _viewport_extraInitializers = [];\n  let _onKeydown_decorators;\n  var DataTableComponent = class {\n    static {\n      _classThis = this;\n    }\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      _columns_decorators = [Input()];\n      _data_decorators = [Input()];\n      _pageSize_decorators = [Input()];\n      _density_decorators = [Input()];\n      _enableColumnReorder_decorators = [Input()];\n      _enableColumnResize_decorators = [Input()];\n      _enableInlineEdit_decorators = [Input()];\n      _keyboardShortcuts_decorators = [Input()];\n      _cellEdited_decorators = [Output()];\n      _rowSelected_decorators = [Output()];\n      _viewport_decorators = [ViewChild(CdkVirtualScrollViewport)];\n      _onKeydown_decorators = [HostListener('window:keydown', ['$event'])];\n      __esDecorate(this, null, _onKeydown_decorators, {\n        kind: \"method\",\n        name: \"onKeydown\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"onKeydown\" in obj,\n          get: obj => obj.onKeydown\n        },\n        metadata: _metadata\n      }, null, _instanceExtraInitializers);\n      __esDecorate(null, null, _columns_decorators, {\n        kind: \"field\",\n        name: \"columns\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"columns\" in obj,\n          get: obj => obj.columns,\n          set: (obj, value) => {\n            obj.columns = value;\n          }\n        },\n        metadata: _metadata\n      }, _columns_initializers, _columns_extraInitializers);\n      __esDecorate(null, null, _data_decorators, {\n        kind: \"field\",\n        name: \"data\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"data\" in obj,\n          get: obj => obj.data,\n          set: (obj, value) => {\n            obj.data = value;\n          }\n        },\n        metadata: _metadata\n      }, _data_initializers, _data_extraInitializers);\n      __esDecorate(null, null, _pageSize_decorators, {\n        kind: \"field\",\n        name: \"pageSize\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"pageSize\" in obj,\n          get: obj => obj.pageSize,\n          set: (obj, value) => {\n            obj.pageSize = value;\n          }\n        },\n        metadata: _metadata\n      }, _pageSize_initializers, _pageSize_extraInitializers);\n      __esDecorate(null, null, _density_decorators, {\n        kind: \"field\",\n        name: \"density\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"density\" in obj,\n          get: obj => obj.density,\n          set: (obj, value) => {\n            obj.density = value;\n          }\n        },\n        metadata: _metadata\n      }, _density_initializers, _density_extraInitializers);\n      __esDecorate(null, null, _enableColumnReorder_decorators, {\n        kind: \"field\",\n        name: \"enableColumnReorder\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"enableColumnReorder\" in obj,\n          get: obj => obj.enableColumnReorder,\n          set: (obj, value) => {\n            obj.enableColumnReorder = value;\n          }\n        },\n        metadata: _metadata\n      }, _enableColumnReorder_initializers, _enableColumnReorder_extraInitializers);\n      __esDecorate(null, null, _enableColumnResize_decorators, {\n        kind: \"field\",\n        name: \"enableColumnResize\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"enableColumnResize\" in obj,\n          get: obj => obj.enableColumnResize,\n          set: (obj, value) => {\n            obj.enableColumnResize = value;\n          }\n        },\n        metadata: _metadata\n      }, _enableColumnResize_initializers, _enableColumnResize_extraInitializers);\n      __esDecorate(null, null, _enableInlineEdit_decorators, {\n        kind: \"field\",\n        name: \"enableInlineEdit\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"enableInlineEdit\" in obj,\n          get: obj => obj.enableInlineEdit,\n          set: (obj, value) => {\n            obj.enableInlineEdit = value;\n          }\n        },\n        metadata: _metadata\n      }, _enableInlineEdit_initializers, _enableInlineEdit_extraInitializers);\n      __esDecorate(null, null, _keyboardShortcuts_decorators, {\n        kind: \"field\",\n        name: \"keyboardShortcuts\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"keyboardShortcuts\" in obj,\n          get: obj => obj.keyboardShortcuts,\n          set: (obj, value) => {\n            obj.keyboardShortcuts = value;\n          }\n        },\n        metadata: _metadata\n      }, _keyboardShortcuts_initializers, _keyboardShortcuts_extraInitializers);\n      __esDecorate(null, null, _cellEdited_decorators, {\n        kind: \"field\",\n        name: \"cellEdited\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"cellEdited\" in obj,\n          get: obj => obj.cellEdited,\n          set: (obj, value) => {\n            obj.cellEdited = value;\n          }\n        },\n        metadata: _metadata\n      }, _cellEdited_initializers, _cellEdited_extraInitializers);\n      __esDecorate(null, null, _rowSelected_decorators, {\n        kind: \"field\",\n        name: \"rowSelected\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"rowSelected\" in obj,\n          get: obj => obj.rowSelected,\n          set: (obj, value) => {\n            obj.rowSelected = value;\n          }\n        },\n        metadata: _metadata\n      }, _rowSelected_initializers, _rowSelected_extraInitializers);\n      __esDecorate(null, null, _viewport_decorators, {\n        kind: \"field\",\n        name: \"viewport\",\n        static: false,\n        private: false,\n        access: {\n          has: obj => \"viewport\" in obj,\n          get: obj => obj.viewport,\n          set: (obj, value) => {\n            obj.viewport = value;\n          }\n        },\n        metadata: _metadata\n      }, _viewport_initializers, _viewport_extraInitializers);\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      DataTableComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    }\n    columns = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _columns_initializers, []));\n    data = (__runInitializers(this, _columns_extraInitializers), __runInitializers(this, _data_initializers, []));\n    pageSize = (__runInitializers(this, _data_extraInitializers), __runInitializers(this, _pageSize_initializers, 50));\n    density = (__runInitializers(this, _pageSize_extraInitializers), __runInitializers(this, _density_initializers, 'regular'));\n    enableColumnReorder = (__runInitializers(this, _density_extraInitializers), __runInitializers(this, _enableColumnReorder_initializers, true));\n    enableColumnResize = (__runInitializers(this, _enableColumnReorder_extraInitializers), __runInitializers(this, _enableColumnResize_initializers, true));\n    enableInlineEdit = (__runInitializers(this, _enableColumnResize_extraInitializers), __runInitializers(this, _enableInlineEdit_initializers, true));\n    keyboardShortcuts = (__runInitializers(this, _enableInlineEdit_extraInitializers), __runInitializers(this, _keyboardShortcuts_initializers, true));\n    cellEdited = (__runInitializers(this, _keyboardShortcuts_extraInitializers), __runInitializers(this, _cellEdited_initializers, new EventEmitter()));\n    rowSelected = (__runInitializers(this, _cellEdited_extraInitializers), __runInitializers(this, _rowSelected_initializers, new EventEmitter()));\n    viewport = (__runInitializers(this, _rowSelected_extraInitializers), __runInitializers(this, _viewport_initializers, void 0));\n    search$ = (__runInitializers(this, _viewport_extraInitializers), new BehaviorSubject(''));\n    columnFilters$ = new BehaviorSubject({});\n    sort$ = new BehaviorSubject(null);\n    page$ = new BehaviorSubject(0);\n    selection$ = new BehaviorSubject(new Set());\n    focusCell$ = new BehaviorSubject(null);\n    displayedColumns$ = new BehaviorSubject([]);\n    rows$ = new BehaviorSubject([]);\n    viewModel$ = combineLatest([this.rows$, this.displayedColumns$, this.search$, this.columnFilters$, this.sort$, this.page$]).pipe(map(([rows, columns, search, columnFilters, sort, page]) => {\n      const filtered = rows.filter(row => {\n        const searchLower = search.toLowerCase();\n        const matchesSearch = !searchLower || columns.some(column => String(row[column.key] ?? '').toLowerCase().includes(searchLower));\n        const matchesColumns = Object.entries(columnFilters).every(([key, value]) => {\n          if (!value) {\n            return true;\n          }\n          const cell = String(row[key] ?? '').toLowerCase();\n          return cell.includes(value.toLowerCase());\n        });\n        return matchesSearch && matchesColumns;\n      });\n      const sorted = sort ? [...filtered].sort((a, b) => {\n        const av = a[sort.key];\n        const bv = b[sort.key];\n        if (av === bv) {\n          return 0;\n        }\n        if (av == null) {\n          return 1;\n        }\n        if (bv == null) {\n          return -1;\n        }\n        const result = av > bv ? 1 : -1;\n        return sort.direction === 'asc' ? result : -result;\n      }) : filtered;\n      const startIndex = page * this.pageSize;\n      const paginated = sorted.slice(startIndex, startIndex + this.pageSize);\n      const summaries = columns.map(column => {\n        if (!column.summary) {\n          return null;\n        }\n        const values = sorted.map(row => Number(row[column.key]) || 0);\n        switch (column.summary) {\n          case 'sum':\n            return values.reduce((acc, value) => acc + value, 0);\n          case 'avg':\n            return values.reduce((acc, value) => acc + value, 0) / (values.length || 1);\n          case 'count':\n            return sorted.length;\n          default:\n            return null;\n        }\n      });\n      return {\n        columns,\n        rows: paginated,\n        total: filtered.length,\n        totalPages: Math.ceil(filtered.length / this.pageSize),\n        summaries\n      };\n    }));\n    ngOnChanges(changes) {\n      if (changes['columns']) {\n        this.displayedColumns$.next([...(this.columns ?? [])]);\n      }\n      if (changes['data']) {\n        this.rows$.next(this.data ?? []);\n      }\n    }\n    ngAfterViewInit() {\n      this.viewport?.scrolledIndexChange.pipe(startWith(0)).subscribe(index => {\n        this.focusCell$.next({\n          row: index,\n          col: 0\n        });\n      });\n    }\n    updateSearch(value) {\n      this.search$.next(value);\n      this.page$.next(0);\n    }\n    updateColumnFilter(key, value) {\n      const next = {\n        ...this.columnFilters$.value,\n        [key]: value\n      };\n      this.columnFilters$.next(next);\n      this.page$.next(0);\n    }\n    sortBy(column) {\n      if (!column.sortable) {\n        return;\n      }\n      const current = this.sort$.value;\n      if (current?.key === column.key) {\n        this.sort$.next({\n          key: column.key,\n          direction: current.direction === 'asc' ? 'desc' : 'asc'\n        });\n      } else {\n        this.sort$.next({\n          key: column.key,\n          direction: 'asc'\n        });\n      }\n    }\n    goToPage(page) {\n      this.page$.next(page);\n      this.viewport?.scrollToIndex(page * this.pageSize);\n    }\n    dropColumns(event) {\n      if (!this.enableColumnReorder) {\n        return;\n      }\n      const columns = [...this.displayedColumns$.value];\n      moveItemInArray(columns, event.previousIndex, event.currentIndex);\n      this.displayedColumns$.next(columns);\n    }\n    handleCellFocus(rowIndex, colIndex) {\n      this.focusCell$.next({\n        row: rowIndex,\n        col: colIndex\n      });\n    }\n    handleCellEdit(rowIndex, column, row, value) {\n      this.cellEdited.emit({\n        rowIndex,\n        key: column.key,\n        value,\n        row\n      });\n    }\n    onRowClick(row, rowIndex, event, totalRows) {\n      const multi = event.ctrlKey || event.metaKey;\n      if (event.shiftKey && this.selection$.value.size) {\n        const last = Array.from(this.selection$.value).pop() ?? 0;\n        const [start, end] = [Math.min(last, rowIndex), Math.max(last, rowIndex)];\n        const range = Array.from({\n          length: end - start + 1\n        }, (_, idx) => start + idx);\n        this.selectRange(range);\n      } else {\n        this.toggleRowSelection(rowIndex, !multi);\n      }\n      this.rowSelected.emit({\n        row,\n        index: rowIndex\n      });\n    }\n    toggleRowSelection(rowIndex, single) {\n      const next = new Set(this.selection$.value);\n      if (single) {\n        next.clear();\n      }\n      if (next.has(rowIndex)) {\n        next.delete(rowIndex);\n      } else {\n        next.add(rowIndex);\n      }\n      this.selection$.next(next);\n    }\n    selectRange(range) {\n      this.selection$.next(new Set(range));\n    }\n    clearSelection() {\n      this.selection$.next(new Set());\n    }\n    onKeydown(event) {\n      if (!this.keyboardShortcuts) {\n        return;\n      }\n      const focus = this.focusCell$.value;\n      if (!focus) {\n        return;\n      }\n      switch (event.key) {\n        case 'ArrowDown':\n          event.preventDefault();\n          this.focusCell$.next({\n            row: focus.row + 1,\n            col: focus.col\n          });\n          break;\n        case 'ArrowUp':\n          event.preventDefault();\n          this.focusCell$.next({\n            row: Math.max(focus.row - 1, 0),\n            col: focus.col\n          });\n          break;\n        case 'ArrowRight':\n          event.preventDefault();\n          this.focusCell$.next({\n            row: focus.row,\n            col: Math.min(focus.col + 1, this.columns.length - 1)\n          });\n          break;\n        case 'ArrowLeft':\n          event.preventDefault();\n          this.focusCell$.next({\n            row: focus.row,\n            col: Math.max(focus.col - 1, 0)\n          });\n          break;\n        case 'Escape':\n          this.clearSelection();\n          break;\n        default:\n          break;\n      }\n    }\n    mathMax(a, b) {\n      return Math.max(a, b);\n    }\n    mathMin(a, b) {\n      return Math.min(a, b);\n    }\n    getInputValue(event) {\n      return event.target?.value || '';\n    }\n  };\n  return DataTableComponent = _classThis;\n})();\nexport { DataTableComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}